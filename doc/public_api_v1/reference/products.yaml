openapi: 3.0.0
info:
  title: Products
  version: "1.0"
servers: 
- url: https://app.regate.io/public_api/v1
security:
  - bearerAuth: []
paths:
  /products:
    get:
      summary: Retrieve all products
      description: Retrieve a list of products used in invoice transaction lines. The returned list is filtered based on the specified query parameters.
      operationId: getProducts
      tags:
        - Products
      parameters:
        - name: filter
          in: query
          description: An object that defines the filters to use to retrieve only the items you require. Each field you add will be an additional filter to apply to the request. The filter key needs to be an attribute name (e.g. `label`), followed by an underscore and an operator name (e.g. `eq` for "equals"). For example, if you want to see all items with label `my_label`, the proper syntax will be `?filter[label_eq]=my_label`.
          
            For detailed information, please see the [Filtering section](../docs/filtering) in our Guides.
          required: false
          schema:
            type: object
            additionalProperties:
              type: string
          style: deepObject
          explode: true
          allowReserved: true
        - name: page
          in: query
          description: Results are paginated. Set the value to the page you want to retieve.
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Results are paginated. This parameter indicates how many results per page will be returned.
          required: false
          schema:
            type: integer
            default: 10
            maximum: 1000
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    $ref: "#/components/schemas/Links"
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/OutputProduct"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"
    post:
      tags:
      - Products
      summary: Create a new product.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputProduct'
      responses:
        201:
          description: Product succesfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:  
                    $ref: "#/components/schemas/OutputProduct"
        400:
          description: Bad request. API request was not correctly formatted.
          $ref: "#/components/responses/BadRequest"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"

  /products/{product_id}:
    get:
      summary: Retrieve a specific product
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          description: Unique UUID of the product you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:  
                    $ref: "#/components/schemas/OutputProduct"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update a specific product
      operationId: patchProduct
      tags:
        - Products
      parameters:
        - name: product_id
          in: path
          description: Unique UUID of the product you want to update.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProduct'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:  
                    $ref: "#/components/schemas/OutputProduct"
        304:
          description: The specified object was not modified.
          $ref: '#/components/responses/NotModified'
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"


components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


  responses:
    BadRequest:
      description: "Bad input. See ErrorMessage for more information."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    Unauthorized:
      description: "Your API credentials are not valid. Please review them."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    Forbidden:
      description: "You don't have permission to access this URL."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    NotFound:
      description: "URL does not exist."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    ServerError:
      description: "Something wrong happened on our side, sorry for the inconvenience."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    NotModified:
      description: "The object was not modified."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"


  schemas:
    Links:
      type: object
      description: An object containing links to the URL for the current API call, as well as URL for the first, previous, next and last page of results, if the retrieved objects are too many to be displayed on a single page.
      properties:
        self:
          type: string
          description: The URL for the current page of results.
        first:
          type: string
          description: The URL for the first page of results.
        prev:
          type: string
          description: The URL for the previous page of results.
        next:
          type: string
          description: The URL for the next page of results.
        last:
          type: string
          description: The URL for the last page of results.

    InputProduct:
      type: object
      required:
      - description
      - price_cents
      - reference
      - title
      properties:
        description:
          type: string
          description: Free text for the product description.
          example: A toothbrush is an oral hygiene tool used to clean the teeth, gums, and tongue. It consists of a head of tightly clustered bristles, atop of which toothpaste can be applied, mounted on a handle which facilitates the cleaning of hard-to-reach areas of the mouth.
        name:
          type: string
          description: Product name. This is the name that appears when you search for the product in the Regate UI.
          example: toothbrush
        price_cents:
          type: integer
          format: int64
          description: The price of this product, **exluding VAT tax**. The price is in cents, divide by 100 to retrieve the actual amount.
          example: 1000
        reference:
          type: string
          description: Product reference text.
          example: Item 123456789
        sales_vat_account_id:
          type: string
          description: Indicates the VAT tax account applied to this product for customers. To retrieve the available VAT accounts, make a GET request to /sales_vat_accounts.
          example: 123abc45-678d-9e01-23f4-5g678901hi23
        
    UpdateProduct:
      type: object
      properties:
        description:
          type: string
          description: Free text for the product description.
          example: A toothbrush is an oral hygiene tool used to clean the teeth, gums, and tongue. It consists of a head of tightly clustered bristles, atop of which toothpaste can be applied, mounted on a handle which facilitates the cleaning of hard-to-reach areas of the mouth.
        name:
          type: string
          description: Product name. This is the name that appears when you search for the product in the Regate UI.
          example: toothbrush
        price_cents:
          type: integer
          format: int64
          description: The price of this product, **exluding VAT tax**. The price is in cents, divide by 100 to retrieve the actual amount.
          example: 1000
        reference:
          type: string
          description: Product reference text.
          example: Item 123456789
        sales_vat_account_id:
          type: string
          description: Indicates the VAT tax account applied to this product for customers. To retrieve the available VAT accounts, make a GET request to /sales_vat_accounts.
          example: 123abc45-678d-9e01-23f4-5g678901hi23
        

    
    OutputProduct:
      type: object
      description: An object containing the attributes of a product.
      properties:
        created_at:
          type: string
          format: date
          description: Timestamp when the product was created in Regate.
          example: 2023-01-31
        description: 
          type: string
          description: Free text for the product description.
          example: A toothbrush is an oral hygiene tool used to clean the teeth, gums, and tongue. It consists of a head of tightly clustered bristles, atop of which toothpaste can be applied, mounted on a handle which facilitates the cleaning of hard-to-reach areas of the mouth.
        id:
          type: string
          description: Unique UUID for this product.
          example: 1a234567-89b0-123c-45d6-e78fg90h1234
        name:
          type: string
          description: Product name. This is the name that appears when you search for the product in the Regate UI.
          example: toothbrush
        price_cents:
          type: integer
          format: int64
          description: The price of this product, **exluding VAT tax**. The price is in cents, divide by 100 to retrieve the actual amount.
          example: 1000
        reference:
          type: string
          description: Product reference text.
          example: Item 123456789
        sales_vat_account_id:
          type: string
          description: Indicates the VAT tax account applied to this product for customers. To retrieve the available VAT accounts, make a GET request to /vat_accounts.
          example: 123abc45-678d-9e01-23f4-5g678901hi23

    ErrorMessage:
      properties:
        ErrorMessage:
          description: Error message describing the error.
          type: string
        ErrorCode:
          description: Error code of the error.
          type: string
        ErrorRelatedTo:
          description: A list of properties to which the error relates.
          type: array
          items:
            type: string
        ErrorIdentifier:
          description: Error identifier used for tracing.
          type: string
          format: uuid
        StatusCode:
          description: Status code for this request.
          type: integer
