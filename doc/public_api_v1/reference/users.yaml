openapi: 3.0.0
info:
  title: Users
  version: "1.0"
servers: 
- url: https://api.regate.io/v1
security:
  - bearerAuth: []
paths:
  /users:
    get:
      summary: Retrieve all users
      description: Retrieve a list of users. Only users associated with the holding of the user making the request will be displayed.
      operationId: getUsers
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          description: An object that defines the filters to use to retrieve only the items you require. Each field you add will be an additional filter to apply to the request. The filter key needs to be an attribute name (e.g. `label`), followed by an underscore and an operator name (e.g. `eq` for "equals"). For example, if you want to see all items with label `my_label`, the proper syntax will be `?filter[label_eq]=my_label`.
          
            For detailed information, please see the [Filtering section](../docs/filtering) in our Guides.
          required: false
          schema:
            type: object
            additionalProperties:
              type: string
          style: deepObject
          explode: true
          allowReserved: true
        - name: page
          in: query
          description: Results are paginated. Set the value to the page you want to retieve.
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Results are paginated. This parameter indicates how many results per page will be returned.
          required: false
          schema:
            type: integer
            default: 10
            maximum: 1000
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    $ref: "#/components/schemas/Links"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/OutputUser"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"
    post:
      tags:
      - Users
      summary: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputUser'
      responses:
        201:
          description: User succesfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:  
                    $ref: "#/components/schemas/OutputUser"
        400:
          description: Bad request. API request was not correctly formatted.
          $ref: "#/components/responses/BadRequest"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"

  /users/{user_id}:
    get:
      summary: Retrieve a specific user.
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: Unique UUID of the user you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:  
                    $ref: "#/components/schemas/OutputUser"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"

  /user_roles:
    get:
      summary: Retrieve all user roles.
      description: Retrieve a list of all roles that can be assigned to a user.
      operationId: getUserRoles
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          description: An object that defines the filters to use to retrieve only the items you require. Each field you add will be an additional filter to apply to the request. The filter key needs to be an attribute name (e.g. `label`), followed by an underscore and an operator name (e.g. `eq` for "equals"). For example, if you want to see all items with label `my_label`, the proper syntax will be `?filter[label_eq]=my_label`.
          
            For detailed information, please see the [Filtering section](../docs/filtering) in our Guides.
          required: false
          schema:
            type: object
            additionalProperties:
              type: string
          style: deepObject
          explode: true
          allowReserved: true
        - name: page
          in: query
          description: Results are paginated. Set the value to the page you want to retieve.
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Results are paginated. This parameter indicates how many results per page will be returned.
          required: false
          schema:
            type: integer
            default: 10
            maximum: 1000
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    $ref: "#/components/schemas/Links"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/OutputUserRoles"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"

  /user_roles/{role_id}:
    get:
      summary: Retrieve a specific user role.
      operationId: getUserRole
      tags:
        - Users
      parameters:
        - name: role_id
          in: path
          description: Unique UUID of the user role you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:  
                    $ref: "#/components/schemas/OutputUserRoles"
        401:
          description: Unauthorized request. Token is missing or is invalid.
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Authentication was successful, but the user does not have permission to access the URL.
          $ref: "#/components/responses/Forbidden"
        500:
          description: Server error, please try again later.
          $ref: "#/components/responses/ServerError"


components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


  responses:
    BadRequest:
      description: "Bad input. See ErrorMessage for more information."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    Unauthorized:
      description: "Your API credentials are not valid. Please review them."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    Forbidden:
      description: "You don't have permission to access this URL."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    NotFound:
      description: "URL does not exist."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    ServerError:
      description: "Something wrong happened on our side, sorry for the inconvenience."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"


  schemas:
    Links:
      type: object
      description: An object containing links to the URL for the current API call, as well as URL for the first, previous, next and last page of results, if the retrieved objects are too many to be displayed on a single page.
      properties:
        self:
          type: string
          description: The URL for the current page of results.
        first:
          type: string
          description: The URL for the first page of results.
        prev:
          type: string
          description: The URL for the previous page of results.
        next:
          type: string
          description: The URL for the next page of results.
        last:
          type: string
          description: The URL for the last page of results.

    InputUser:
      type: object
      required:
      - first_name
      - last_name
      - email
      - default_manager_id
      - user_role_id
      properties:
        first_name:
          type: string
          description: User's first name.
          example: John
        last_name:
          type: string
          description: User's last name.
          example: Doe
        email:
          type: string
          description: User's company email.
          example: email@example.com
        default_manager_id:
          type: string
          description: Unique UUID of the user who will act as the default manager of the newly created user.
          example: abcd1234-e5f6-7gh8-ij90-12d3k4l5mn67
        user_roles:
          type: array
          description: An array containing the role IDs assigned to this user. To retrieve the list of roles, make a `GET` request to `/user_roles`.
          items:
            type: string
            description: The ID of the role assigned to this user. 
            example: 1abc2d3e-fg45-6789-0hi1-2j345klmno6p

    
    OutputUser:
      type: object
      description: An object containing the attributes of a user.
      properties:
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created in Regate.
          example: 2023-01-31T23:59:59.000Z
        created_by:
          type: string
          description: Unique UUID of the user that created this particular user.
          example: 123456ab-78cd-ef90-1gh2-345678ijklmn
        id:
          type: string
          description: Unique UUID for this user.
          example: 1a234567-89b0-123c-45d6-e78fg90h1234
        first_name:
          type: string
          description: User's first name.
          example: John
        last_name:
          type: string
          description: User's last name.
          example: Doe
        email:
          type: string
          description: User's company email.
          example: email@example.com
        default_manager_id:
          type: string
          description: Unique UUID of the user who will act as the default manager of the newly created user.

            **NOTE:** Only users with the following roles can be selected as default managers - `CEA`, `CCP`, `CECP`, `ANF`, `SCO`, `CEC-simple`.
          example: abcd1234-e5f6-7gh8-ij90-12d3k4l5mn67
        user_roles:
          type: array
          description: An array of objects describing the roles assigned to this user. To retrieve the list of available roles, make a `GET` request to `/user_roles`.
          items:
            type: object
            properties:
              id:
                type: string 
                description: Unique UUID of the role assigned to this user. 
                example: 1abc2d3e-fg45-6789-0hi1-2j345klmno6p
              name:
                type: string
                description: The name of the role assigned to this user.
                example: Certified accountant
        state:
          type: string
          description: Indicates the current status of the user. <br> `invited` - The user was created and an invite has been sent to his email address, but it has not yet been accepted. <br> `accepted` - The user has accepted the email invite and can now access Regate. <br> `removed` - The user was archived and can no longer access Regate.
          example: invited
          enum: [invited, accepted, removed]

    OutputUserRoles:
      type: object
      description: An object containing the attributes of a user role.
      properties:
        code:
          type: string
          description: User role code used internally in Regate.
          example: CEX
        id: 
          type: string
          description: Unique UUID of the user role.
          example: 1abc2d3e-fg45-6789-0hi1-2j345klmno6p
        name:
          type: string
          description: Name of the user role.
          example: Certified accountant

    ErrorMessage:
      properties:
        ErrorMessage:
          description: Error message describing the error.
          type: string
        ErrorCode:
          description: Error code of the error.
          type: string
        ErrorRelatedTo:
          description: A list of properties to which the error relates.
          type: array
          items:
            type: string
        ErrorIdentifier:
          description: Error identifier used for tracing.
          type: string
          format: uuid
        StatusCode:
          description: Status code for this request.
          type: integer
